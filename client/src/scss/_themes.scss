@import './colors';
@import './dims';
@import './sizes';

// in html, add the theme-{{ theme name }}  to body ex. 'theme-dark'
// ------------------------------------------------
// in scss, wrap root element with the mixin for example is header.scss...
// there you have access to the theme map and can use
// all themes will be compiled and you can change between them by just changing html body theme class ^ 
// ------------------------------------------------
// @include themeProvider() using ($themeMap) { 
//   .btn {
//     background-color: map-get($themeMap, 'buttonBGColor');
//     color: map-get($themeMap, 'buttonTextColor');
// }
//

$DEFAULT_THEME: light;
$modifierIntensity: 10;

$themes: (
  karry: (
    name: 'karry',
    // basics
    backupBackgroundColor: $karryTransparency,
    backgroundColor: linear-gradient(180deg, $karry 0%, $karryTransparency 100%),
    textColor: $dark,
    titleTextColor: darken($karry, $modifierIntensity),
    // linkColor: darken($red, $modifierIntensity),
    linkColor: lighten(#000, $modifierIntensity / 2),
    errorColor: $red,
    successColor: $green,
    warningColor: $amber,
    // list items
    listItemBGColor: $karry,
    inputErrorBGColor: #facfcf,
    listItemHoverBGColor: #fff8f4,
    lightDeemphasizeOpacity: 0.7,
    deemphasizeOpacity: 0.4,
    // input
    inputBGColor: #fff,
    inputTextColor: $dark,
    inputBorder: 4px solid darken($karry, $modifierIntensity / 2),
    inputMarginTop: -4px,
    inputMarginBottom: 0px,
    inputBorderRadius: 0,
    switchColor: darken($karry, $modifierIntensity),
    inputPlaceholderTextColor: darken($karry, $modifierIntensity),
    inputSkeletonGradient: linear-gradient(to right, #eeeeee 8%, #dddddd 18%, #eeeeee 33%),
    // button
    buttonTextColor: #fff,
    buttonBGColor: darken($karry, $modifierIntensity * 2),
    buttonSecondaryTextColor: $dark,
    buttonSecondaryBGColor: darken($karry, $modifierIntensity / 2),
    buttonBGHoverColor: darken($karry, $modifierIntensity * 2), 
  ),
  light: (
    name: 'light',
    // basics
    backgroundColor: transparent,
    textColor: #333,
    titleTextColor: #333,
    linkColor: $blue,
    errorColor: $red,
    successColor: $green,
    warningColor: $amber,
    // list items
    listItemBGColor: #fff,
    inputErrorBGColor: #facfcf,
    listItemHoverBGColor: darken(#fff, $modifierIntensity / 4),
    lightDeemphasizeOpacity: 0.7,
    deemphasizeOpacity: 0.4,
    // input
    inputBGColor: $light,
    inputTextColor: $dark,
    inputBorder: none,
    inputMarginTop: 0px,
    inputMarginBottom: 1rem,
    inputBorderRadius: $input-border-radius,
    switchColor: lighten($light, $modifierIntensity),
    inputPlaceholderTextColor: lighten($dark, $modifierIntensity * 2),
    inputSkeletonGradient: linear-gradient(to right, #eeeeee 8%, #dddddd 18%, #eeeeee 33%),
    // button
    buttonTextColor: #fff,
    buttonBGColor: #000,
    buttonSecondaryTextColor: $dark,
    buttonSecondaryBGColor: darken($light, $modifierIntensity / 2),
    buttonBGHoverColor: $blue, 
  ),
  dark: (
    name: 'dark',
    // basics
    backgroundColor: #000,
    textColor: $light,
    titleTextColor: $light,
    linkColor: lighten($blue, $modifierIntensity),
    errorColor: lighten($red, $modifierIntensity),
    successColor: lighten($green, $modifierIntensity),
    warningColor: $amber,
    // list items
    listItemBGColor: $dark,
    listItemHoverBGColor : darken($dark, $modifierIntensity),
    lightDeemphasizeOpacity: 0.85,
    deemphasizeOpacity: 0.6,
    // input
    inputBGColor: $dark,
    inputErrorBGColor: darken(#facfcf, $modifierIntensity),
    inputTextColor: $light,
    inputBorder: none,
    inputMarginTop: 0px,
    inputMarginBottom: 1rem,
    inputBorderRadius: $input-border-radius,
    switchColor: $light,
    inputPlaceholderTextColor: lighten($dark, $modifierIntensity * 2),
    inputSkeletonGradient: linear-gradient(to right,lighten($dark, $modifierIntensity) 8%, $dark, lighten($dark, $modifierIntensity) 33%),
    // button
    buttonTextColor: #fff,
    buttonBGColor: $blue,
    buttonSecondaryTextColor: $light,
    buttonSecondaryBGColor: lighten($dark, $modifierIntensity),
    buttonBGHoverColor: lighten($blue, $modifierIntensity), 

  ),
);

// provide theme to content
@mixin themeProvider() {
  // default theme
  :global {
    body {
      :local {
        @content(map-get($themes, $DEFAULT_THEME))
      }
    }
  }
  // 
  @each $name, $themeMap in $themes {
    :global {
      body.theme-#{$name} {
        :local {
          @content($themeMap);
        } 
      }
    }
  }
}

