@import './sizes';
// @import './colors';
@import './mixins';
@import './themes';


@mixin buttonSharedStylings() {
  padding: $input-padding;
  border-radius: $input-border-radius;
  margin: .5rem 0;
  border: none;
  transition: background .25s ease-in-out;

  &.fullWidth {
    width: 100%;
  }

  &:focus {
    outline: none;
  }
}

@include themeProvider using ($themeMap) {

  .form {

    &.fullWidth {
      width: 100%;
    }
    
    &.maxWidth {
      max-width: 30rem;
      width: 100%;
    }

    text-align: center;

    .warningBox {
      color: map-get($themeMap, 'warningColor');
      font-weight: bold;
      margin: 2rem 0;
      
      a {
        text-decoration: underline;
        color: inherit;
      }
    }
  
    .fieldError,
    .errorBox {
      color: map-get($themeMap, 'errorColor');
      text-align: center;
      margin: .5rem 0;
    }
  
    .successBox {
      color: map-get($themeMap, 'successColor');
      text-align: center;
      margin: .5rem 0;
    }
  
    .half {
      @include desktop {
        > :first-child {
         padding-right: $padding-gutter / 2;
       }
       > :last-child {
         padding-left: $padding-gutter / 2;
       }
      }
    }
  
    .halfWithIcon {
  
      > :nth-child(2) {
        display: none;
       }
  
      @include desktop {
        display: flex;
        justify-content: center;
        align-items: center;
  
  
        > :first-child {
         padding-right: $padding-gutter / 2;
       }
  
       > :nth-child(2) {
        display: block;
        padding-left: 0;
        padding-right: 0;
       }
  
       > :last-child {
         padding-left: $padding-gutter / 2;
       }
       
      }
    }
  
    .halfLeftRightAligned {
      > *:first-child {
        text-align: left;
        float: left;
      }
      > *:last-child {
        text-align: right;
        > * {
          float: right;
        }
      }
    }
  
  }
  
  textarea.input {
    min-height: 10rem;
    vertical-align: top;
    
  }
  
  .inputWpr {
    position: relative;
    margin-bottom: 1rem;

    input, button, textarea {
      &.disabled,
      &[disabled] { 
        opacity: 0.5;
        cursor: not-allowed;
      }
    }
  
    &.filled {
      label {
        display: block;
      }
      
      &.dropdown, 
      .input {
        padding-top: $input-padding * 1.5;
      }
    }
  
    &.switch {
      position: relative;
      margin: 0.25rem 0;
      text-align: left;
      &.disabled {
        cursor: not-allowed;
        pointer-events: none;
      }
      
      
      input[type=checkbox],
      .fakeCheckBox {
        position: absolute;
        height: 0;
        width: 0;
        visibility: hidden;
        &.checked + label,
        &:checked + label {
          background: map-get($themeMap, 'successColor');
        }
        &.checked + label.blue, 
        &:checked + label.blue {
          background: â‰ˆ
        }
        &.checked + label:after,
        &:checked + label:after {
          left: 93%;
          transform: translateX(-100%);
        }
      
      }
    
      label {
        margin: 0;
        cursor: pointer;
        text-indent: -9999px;
        width: 50px;
        height: 25px;
        background: map-get($themeMap, 'inputBGColor');
        transition: background .5s ease-in-out;
        display: block;
        border-radius: 100px;
        position: relative;
      }
    
      .checkmark {
        position: absolute;
        top: 15%;
        right: 10%;
        font-size: 1.3rem;
        color: map-get($themeMap, 'linkColor');
      }
    
    
      label:after {
        content: '';
        position: absolute;
        top: 12%;
        left: 7%;
        width: 35%;
        height: 75%;
        background: map-get($themeMap, 'switchColor');
        border-radius: 90px;
        transition: 0.3s;
      }
    
    
  
      label:active:after {
        width: 20px;
      }
    }  
    
    label {
      position: absolute;
      display: none;
      top: 0;
      left: 0;
      font-size: $input-padding * .6;
      color: map-get($themeMap, 'linkColor');
      padding-left: $input-padding;
      padding-top: $input-padding * .5;
    }

    &.dropdown {
      &.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        
        select {
          cursor: not-allowed;
        }
      }
    }
  
  
    &.dropdown,
    .input {

      &::placeholder {
        color: map-get($themeMap, 'inputPlaceholderTextColor');
      }

      background: map-get($themeMap, 'inputBGColor');
      color: map-get($themeMap, 'inputTextColor');
      border: 0;
      padding: $input-padding;
      transition: padding .25s ease-in-out;
      border-radius: $input-border-radius;
      width: 100%;
      position: relative;
  
      .arrow {
        color: map-get($themeMap, 'textColor');
        position: absolute;
        top: 30%;
        right: $input-padding;
      }
      
  
      select {
        padding: 0;
        border: 0;
        text-indent: 0;
        -webkit-appearance: none;
        -moz-appearance : none;
        box-shadow: none;
        background: transparent;
        height: auto;
        color: inherit;
      }
      
      &:-webkit-autofill,
      &:-webkit-autofill:hover {
        box-shadow: 0 0 0px 1000px map-get($themeMap, 'inputBGColor') inset;
        transition: background-color 5000s ease-in-out 0s;
      }
    
      &.hasErrors {
        background: map-get($themeMap, 'inputErrorBGColor');
        color: map-get($themeMap, 'errorColor');
        &:focus {
          background: lighten(map-get($themeMap, 'inputErrorBGColor'), 2);
        }
      }
          
      &:focus {
        outline: none;
        background: lighten(map-get($themeMap, 'inputBGColor'), 2);
      }
    }
  }

  .buttonLink {
    @include buttonSharedStylings();
    background: none;
    border: none;
    color: map-get($themeMap, 'linkColor');
    padding: 0;
    transition: color .25s ease-in-out;

    &:not([disabled]):hover {
      color: lighten(map-get($themeMap, 'linkColor'), 15);
    }
    &:focus {
      outline: none;
    }
   
  }
  
  .button {
    @include buttonSharedStylings();
    background: map-get($themeMap, 'buttonBGColor');
    color: map-get($themeMap, 'buttonTextColor');

    &:not([disabled]):hover {
      background: map-get($themeMap, 'linkColor');
    }

    &:focus {
      background: lighten(map-get($themeMap, 'buttonBGColor'), 2);
    }
  }

  .buttonSecondary {
    @include buttonSharedStylings();
    background: map-get($themeMap, 'buttonSecondaryBGColor');
    color: map-get($themeMap, 'buttonSecondaryTextColor');

    &:not([disabled]):hover {
      background: map-get($themeMap, 'linkColor')
    }
    &:focus {
      background: map-get($themeMap, 'buttonSecondaryBGColor');
    }
  }
}
